// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResourceStatus {
  PENDING
  ACTIVE
  DELETED
  BLOCKED
}

enum GroupUserType {
  MEMBER
  MODERATOR
}

enum ForumType {
  TOPIC
  HOMEROOM
}

enum UserType {
  TEACHER
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  TBD
}

enum MessageType {
  TEXT
  IMAGE
}

enum ConversationType {
  GROUP_CHAT
  CHAT
}

enum EventType {
  GENERAL
  FORUM
}

enum EventStatus {
  UPCOMING
  HAPPENING
  DONE
  CANCELLED
}

model User {
  id           String   @id(map: "pk_user") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  fullName     String   @map("full_name") @db.VarChar(100)
  email        String   @map("email") @db.VarChar(255)
  dateOfBirth  DateTime @map("date_of_birth") @db.Date
  gender       Gender
  phoneNumber  String?  @map("phone_number") @db.VarChar(15)
  address      String?  @db.VarChar(255)
  password     String   @map("password")
  refreshToken String?  @map("refresh_token")
  avatarUrl    String?  @map("avatar_url") @db.VarChar(255)
  type         UserType @default(STUDENT)
  facultyId    String   @map("faculty_id") @db.Uuid

  faculty           Faculty              @relation(fields: [facultyId], references: [id], map: "fk_user_faculty")
  events            Event[]
  roles             UserToRole[]
  forums            Forum[]
  userToForum       UserToForum[]
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  tokens            VerificationToken[]
  documents         PostDocument[]
  sentRequests      Friendship[]         @relation("sender_friendships")
  receivedRequests  Friendship[]         @relation("receiver_friendships")
  conversations     UserToConversation[]
  notifications     Notification[]       @relation("receiver_notifications")
  sentNotifications Notification[]       @relation("sender_notifications")
  userToEvent    UserToEvent[]
  eventComments     EventComment[]
  eventDocuments    EventDocument[]
  replyComments     ReplyComment[]

  @@unique([email], map: "ixuq_user_email")
  @@map("user")
}

model VerificationToken {
  id        String   @id(map: "pk_verification_token") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @db.Uuid
  token     String
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_verification_token_user")

  @@map("verification_token")
}

model Faculty {
  id          String   @id(map: "pk_faculty") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name        String   @db.VarChar(50)
  displayName String   @db.VarChar(50)

  users User[]

  @@unique([name], map: "ixuq_faculty_name")
  @@map("faculty")
}

model Role {
  id           String   @id(map: "pk_role") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name         String   @db.VarChar(50)
  displayName  String   @map("display_name") @db.VarChar(50)
  description  String?  @db.VarChar(255)
  canBeUpdated Boolean  @default(true) @map("can_be_updated") @db.Boolean
  canBeDeleted Boolean  @default(true) @map("can_be_deleted") @db.Boolean

  //Relation
  users       UserToRole[]
  permissions RoleToPermission[]

  @@map("role")
}

model UserToRole {
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  //Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user_to_role_user")
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "fk_user_to_role_role")

  @@id([userId, roleId])
  @@map("user_to_role")
}

model Permission {
  id                Int      @id(map: "pk_permission") @default(autoincrement()) @map("id") @db.Integer
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  resourceName      String   @map("resource_name") @db.VarChar(200)
  displayName       String   @map("display_name") @db.VarChar(200)
  description       String?  @map("description") @db.VarChar(255)
  canCreate         Boolean  @default(false) @map("can_create") @db.Boolean
  canRead           Boolean  @default(false) @map("can_read") @db.Boolean
  canUpdate         Boolean  @default(false) @map("can_update") @db.Boolean
  canDelete         Boolean  @default(false) @map("can_delete") @db.Boolean
  permissionGroupId Int?     @map("permission_group_id") @db.Integer

  //Relation
  roles           RoleToPermission[]
  permissionGroup PermissionGroup?   @relation(fields: [permissionGroupId], references: [id], map: "fk_permission_permission_group")

  //Index
  @@index([permissionGroupId], map: "ixfk_permission_permission_group_id")
  @@map("permission")
}

model RoleToPermission {
  roleId       String   @map("role_id") @db.Uuid
  permissionId Int      @map("permission_id") @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  //Relation
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "fk_role_to_permission_role")
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "fk_role_to_permission_permission")

  @@id([roleId, permissionId])
  @@map("role_to_permission")
}

model PermissionGroup {
  id           Int      @id(map: "pk_permission_info") @default(autoincrement()) @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  resourceName String   @map("resource_name") @db.VarChar(50)
  description  String   @db.VarChar(200)

  //Relation
  permissions Permission[]

  @@map("permission_group")
}

model Forum {
  id        String         @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name      String         @db.VarChar(100)
  modId     String         @map("mod_id") @db.Uuid
  status    ResourceStatus @default(PENDING)
  type      ForumType      @default(HOMEROOM)
  avatarUrl String?        @map("avatar_url") @db.Text

  moderator    User           @relation(fields: [modId], references: [id], onDelete: Cascade)
  users        UserToForum[]
  posts        Post[]
  topics       ForumToTopic[]
  conversation Conversation?
  events       Event[]

  @@map("forum")
}

model UserToForum {
  userId    String         @default(dbgenerated("uuid_generate_v4()")) @map("user_id") @db.Uuid
  forumId   String         @default(dbgenerated("uuid_generate_v4()")) @map("forum_id") @db.Uuid
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userType  GroupUserType
  status    ResourceStatus @default(ACTIVE)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum Forum @relation(fields: [forumId], references: [id], onDelete: Cascade)

  @@id([userId, forumId])
  @@map("user_to_forum")
}

model Post {
  id        String         @id(map: "pk_post") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String         @default(dbgenerated("uuid_generate_v4()")) @map("user_id") @db.Uuid
  forumId   String         @default(dbgenerated("uuid_generate_v4()")) @map("forum_id") @db.Uuid
  status    ResourceStatus @default(PENDING)
  content   String         @db.Text

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum     Forum          @relation(fields: [forumId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  documents PostDocument[]

  @@map("post")
}

model Comment {
  id        String   @id(map: "pk_comment") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @default(dbgenerated("uuid_generate_v4()")) @map("user_id") @db.Uuid
  postId    String   @default(dbgenerated("uuid_generate_v4()")) @map("post_id") @db.Uuid
  content   String   @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  replyComments ReplyComment[]
  @@map("comment")
}

model Like {
  userId    String   @default(dbgenerated("uuid_generate_v4()")) @map("user_id") @db.Uuid
  postId    String   @default(dbgenerated("uuid_generate_v4()")) @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId], map: "pk_like")
  @@map("like")
}

model Topic {
  id          String   @id(map: "pk_topic") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name        String   @db.VarChar(50)
  displayName String?  @map("display_name") @db.VarChar(50)

  forums ForumToTopic[]

  @@unique([name], map: "ixuq_topic_name")
  @@map("topic")
}

model ForumToTopic {
  id        String   @id(map: "pk_form_to_topic") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  topicId   String   @map("topic_id") @db.Uuid
  forumId   String   @map("forum_id") @db.Uuid

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  forum Forum @relation(fields: [forumId], references: [id], onDelete: Cascade)

  @@unique([topicId, forumId], map: "ixuq_forum_to_topic")
  @@index([topicId])
  @@index([forumId])
  @@map("forum_to_topic")
}

model PostDocument {
  id        String   @id(map: "pk_post_document") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @map("user_id") @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  fileUrl   String   @map("file_url")
  fileName  String   @map("file_name")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([fileUrl], map: "ixuq_file_url")
  @@map("post_document")
}

model Friendship {
  id         String         @id(map: "pk_friend") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt  DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  senderId   String         @map("sender_id") @db.Uuid
  receiverId String         @map("receiver_id") @db.Uuid
  status     ResourceStatus @default(PENDING)

  sender   User @relation("sender_friendships", fields: [senderId], references: [id])
  receiver User @relation("receiver_friendships", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@unique([receiverId, senderId])
  @@map("friendship")
}

model Conversation {
  id            String           @id(map: "pk_conversation") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  displayName   String?          @map("display_name") @db.VarChar(50)
  type          ConversationType @default(CHAT)
  avatarUrl     String?          @map("avatar_url") @db.Text
  lastMessageId String?          @unique @map("last_message_id") @db.Uuid()
  forumId       String?          @unique @map("forum_id") @db.Uuid

  users       UserToConversation[]
  messages    Message[]
  lastMessage Message?             @relation("conversation_last_message", fields: [lastMessageId], references: [id])
  forum       Forum?               @relation(fields: [forumId], references: [id])

  @@map("conversation")
}

model UserToConversation {
  id             String   @id(map: "pk_user_to_conversation") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  displayName    String?  @map("display_name") @db.VarChar(50)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@unique([conversationId, userId])
  @@map("user_to_conversation")
}

model Message {
  id             String      @id(map: "pk_message") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId String      @map("conversation_id") @db.Uuid
  userId         String      @map("user_id") @db.Uuid
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  content        String      @db.Text
  type           MessageType @default(TEXT)

  conversation              Conversation       @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  lastMessageOfConversation Conversation?      @relation("conversation_last_message")
  author                    UserToConversation @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message")
}

model Notification {
  id        String    @id(map: "pk_notification") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content   String    @db.VarChar(255)
  modelId   String    @map("model_id") @db.Uuid
  modelName String    @map("model_name") @db.VarChar(50)
  userId    String    @map("user_id") @db.Uuid
  senderId  String?   @map("sender_id") @db.Uuid
  readAt    DateTime? @map("read_at") @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user   User  @relation("receiver_notifications", fields: [userId], references: [id], onDelete: Cascade)
  sender User? @relation("sender_notifications", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Event {
  id          String      @id(map: "pk_event") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  forumId     String?     @map("forum_id") @db.Uuid
  userId      String?     @map("user_id") @db.Uuid
  displayName String      @map("display_name") @db.VarChar(128)
  location    String      @map("location")  @db.VarChar(128)
  startAt     DateTime    @map("start_at") @db.Timestamptz(6)
  endAt       DateTime    @map("end_at") @db.Timestamptz(6)
  status      EventStatus
  type        EventType
  content     String      @db.Text

  forum     Forum?          @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  users     UserToEvent[]
  comments  EventComment[]
  documents EventDocument[]

  @@map("event")
}

model UserToEvent {
  userId    String   @default(dbgenerated("uuid_generate_v4()")) @map("user_id") @db.Uuid
  eventId   String   @default(dbgenerated("uuid_generate_v4()")) @map("event_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId], map: "pk_user_to_event")
  @@map("user_to_event")
}

model EventComment {
  id        String   @id(map: "pk_event_comment") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @default(dbgenerated("uuid_generate_v4()")) @map("user_id") @db.Uuid
  eventId   String   @default(dbgenerated("uuid_generate_v4()")) @map("event_id") @db.Uuid
  content   String   @db.Text

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_comment")
}

model EventDocument {
  id        String   @id(map: "pk_event_document") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @map("user_id") @db.Uuid
  eventId   String   @map("event_id") @db.Uuid
  fileUrl   String   @map("file_url")
  fileName  String   @map("file_name")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([fileUrl], map: "ixuq_event_file_url")
  @@map("event_document")
}

model ReplyComment {
  id          String   @id(map: "pk_reply_comment") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content     String   @db.Text
  userId      String   @map("user_id") @db.Uuid
  commentId   String   @map("comment_id") @db.Uuid    
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  user        User      @relation(fields: [userId], references: [id])
  comment     Comment   @relation(fields: [commentId], references: [id])

  @@map("reply_comment")
}
